---
- hosts: all
  become: true
  gather_facts: yes
  vars:
    api_server_ip: 172.22.22.100
    pod_internal_nw: 192.168.0.0/16
    master_node_name: kube-kmaster
  tasks: 
    - name: Allow Apt to be used over https by installing few packages
      apt:
         name: "{{ packages }}"
         state: present
         update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common


    - name: Add apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present


    - name: Add package repository for docker stable version
      apt_repository:
         repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
         state: present 
         filename: dokcker.list

# Install Docker and its dependent components
    - name: Install docker and dependent packages
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce 
        - docker-ce-cli 
        - containerd.io
      notify:
        - docker status

  
    - name: Add sudo user vagrant to docker group
      user:
        name: vagrant
        group: docker

# Kubelet will not start if the system has swap enabled, 
# so we are disabling swap using the below code
    - name: Disable SWAP 
      command: swapoff -a
      when: ansible_swaptotal_mb > 0


    - name: Remove swapfile from /etc/fstab file
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

# Installing kubelet, kubeadm and kubectl using the below code

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present


    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list


    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet 
          - kubeadm 
          - kubectl

    
    - name: Configure node ip
      lineinfile:
        create: yes
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ ansible_default_ipv4.address }}

    - name: Restart kubelet service
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --apiserver-advertise-address="{{ api_server_ip }}" --apiserver-cert-extra-sans="{{ api_server_ip }}"  --node-name "{{ master_node_name }}" --pod-network-cidr="{{ pod_internal_nw }}"

    - name: Setup kubeconfig
      command: "{{ item }}"
      with_items:
      - mkdir -p $HOME/.kube
      - cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      - chown root:root $HOME/.kube/config

#Setup the container networking provider and the network policy engine using the below code
    - name: Install calico pod network
      become: false
      command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

# Generate kube join command for joining the node to the Kubernetes cluster and
# store the command in the file named join-command
    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Copy join command to local file
      become: false
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

# Setup a handler for checking Docker daemon using the below code
  handlers:
    - name: docker status
      service: name=docker state=started
